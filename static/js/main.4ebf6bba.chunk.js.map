{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","components/Ad.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Categories","NavLink","map","c","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","useState","articles","setArticles","loading","setLoading","useEffect","a","query","axios","get","response","data","console","log","fetchData","key","AdBlock","Ad","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"w/BAIA,IAAMA,EAAa,CAGjB,CACEC,KAAM,MACNC,KAAM,OAER,CACED,KAAM,WACNC,KAAM,4BAER,CACED,KAAM,gBACNC,KAAM,wCAER,CACED,KAAM,SACNC,KAAM,gBAER,CACED,KAAM,UACNC,KAAM,gBAER,CACED,KAAM,SACNC,KAAM,sBAER,CACED,KAAM,aACNC,KAAM,iBAIJC,EAAkBC,IAAOC,IAAV,KA8DNC,GA/CEF,YAAOG,IAAPH,CAAH,KA0BK,WACjB,OACE,kBAACD,EAAD,KACGH,EAAWQ,KAAI,SAACC,U,24BC7EvB,IAAMC,EAAgBN,IAAOC,IAAV,KAsEJM,EAvBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,IAAKC,EAAeJ,EAAfI,WACjC,OACE,kBAACN,EAAD,KACGM,GACC,yBAAKC,UAAU,aACb,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAChC,yBAAKC,IAAKL,EAAYM,IAAI,gBAIhC,yBAAKL,UAAU,YACb,4BACE,uBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAC/BP,IAGL,2BAAIC,M,wTC9DZ,IAAMS,EAAgBnB,IAAOC,IAAV,KA4DJmB,EA/CE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACDC,mBAAS,MADR,mBAC1BC,EAD0B,KAChBC,EADgB,OAEHF,oBAAS,GAFN,mBAE1BG,EAF0B,KAEjBC,EAFiB,KA6BjC,OAvBAC,qBAAU,YAEO,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,SAKRG,EAAqB,QAAbR,EAAqB,GAArB,oBAAuCA,GALvC,SAMSS,IAAMC,IAAN,yDAC6BF,EAD7B,6CANT,OAMRG,EANQ,OASdR,EAAYQ,EAASC,KAAKV,UATZ,gDAWdW,QAAQC,IAAR,MAXc,QAahBT,GAAW,GAbK,yDAAH,qDAefU,KACC,CAACf,IAKAI,EACK,kBAACN,EAAD,+BAGJI,EAMH,kBAACJ,EAAD,KACGI,EAASnB,KAAI,SAACI,GAAD,OACZ,kBAAC,EAAD,CAAU6B,IAAK7B,EAAQG,IAAKH,QAASA,QAPlC,M,uNClDX,IAAM8B,EAAUtC,IAAOC,IAAV,KAkBEsC,EARJ,WACT,OACE,kBAACD,EAAD,KACE,yECESE,EAbE,SAAC,GAAe,IAEzBnB,EAFwB,EAAZoB,MAEKC,OAAOrB,UAAY,MAE1C,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUA,SAAUA,IACpB,kBAAC,EAAD,QCJSsB,EALH,WACV,OAAO,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWL,KCO1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCXNS,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.4ebf6bba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst categories = [\r\n  //name은 실제 카테고리 값이고\r\n  //text 값은 렌더링 할 때 사용할 한글 카테고리\r\n  {\r\n    name: \"all\",\r\n    text: \"ALL\",\r\n  },\r\n  {\r\n    name: \"business\",\r\n    text: \"비즈니스\",\r\n  },\r\n  {\r\n    name: \"entertainment\",\r\n    text: \"엔터테인먼트\",\r\n  },\r\n  {\r\n    name: \"health\",\r\n    text: \"건강\",\r\n  },\r\n  {\r\n    name: \"science\",\r\n    text: \"과학\",\r\n  },\r\n  {\r\n    name: \"sports\",\r\n    text: \"스포츠\",\r\n  },\r\n  {\r\n    name: \"technology\",\r\n    text: \"기술\",\r\n  },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  background-color: #313030;\r\n  padding: 1.5rem;\r\n  width: 95%;\r\n  border-radius: 5px;\r\n  margin: 0 auto;\r\n  font-weight: bold;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n  font-size: 1.3rem;\r\n  cursor: pointer;\r\n  white-space: pre;\r\n  text-decoration: none;\r\n  color: #fff;\r\n  padding-bottom: 0.25rem;\r\n  margin: 0 20px;\r\n\r\n  &:hover {\r\n    color: #495057;\r\n  }\r\n\r\n  &.active {\r\n    border-bottom: 2px solid #c12f2f;\r\n    color: #c12f2f;\r\n    &:hover {\r\n      color: #c12f2f;\r\n    }\r\n  }\r\n\r\n  & + & {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst Categories = () => {\r\n  return (\r\n    <CategoriesBlock>\r\n      {categories.map((c) => (\r\n        //NavLink로 만들어진 Category 컴포넌트에 to 값은\r\n        //\"/카테고리이름\" 으로 설정함\r\n        //전체보기의 경우는 \"/all\" 대신 \"/\"로 설정\r\n        //to 값이\"/\" 일 때는 exact 값을 true로 해주어야 함.\r\n        <Category\r\n          key={c.name}\r\n          activeClassName=\"active\"\r\n          exact={c.name === \"all\"}\r\n          to={c.name === \"all\" ? \"/\" : `/${c.name}`}\r\n        >\r\n          {c.text}\r\n        </Category>\r\n      ))}\r\n    </CategoriesBlock>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","// 각 뉴스 정보를 보여주는 컴포넌트\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NewsItemBlock = styled.div`\r\n  display: inline-flex;\r\n  height: 120px;\r\n  margin-left : 3rem;\r\n  margin-top : 2rem;\r\n\r\n  .thumbnail {\r\n    margin-right: 1rem;\r\n    img {\r\n      width: 160px;\r\n      height: 120px;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n  .contents {\r\n    h2 {\r\n      display: -webkit-box;\r\n      -webkit-line-clamp:3;\r\n      -webkit-box-orient:vertical;\r\n      height: 60px;\r\n      margin: 0;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      a {\r\n        color: black;\r\n        &:hover {\r\n          color: #4728bf;\r\n        }\r\n      }\r\n      \r\n      }\r\n    }\r\n    p {\r\n      height: 60px;\r\n      overflow: hidden;\r\n      margin: 0;\r\n      line-height: 1.3;\r\n      margin-top: 0.5rem;\r\n      white-space: normal;\r\n      padding-botton: 5rem;\r\n      \r\n    }\r\n  }\r\n  & + & {\r\n    margin-top: 3rem;\r\n  }\r\n`;\r\nconst NewsItem = ({ article }) => {\r\n  const { title, description, url, urlToImage } = article;\r\n  return (\r\n    <NewsItemBlock>\r\n      {urlToImage && (\r\n        <div className=\"thumbnail\">\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <img src={urlToImage} alt=\"thumbnail\" />\r\n          </a>\r\n        </div>\r\n      )}\r\n      <div className=\"contents\">\r\n        <h2>\r\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {title}\r\n          </a>\r\n        </h2>\r\n        <p>{description}</p>\r\n      </div>\r\n    </NewsItemBlock>\r\n  );\r\n};\r\n\r\nexport default NewsItem;\r\n","//API를 요청하고 뉴스 데이터가 들어 있는 배열을 컴포넌트 배열로 변환하여 렌더링해 주는 컴포넌트\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport axios from \"axios\";\r\n\r\nconst NewsListBlock = styled.div`\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  width: 70%;\r\n  margin: 0 auto;\r\n  margin-top: 2rem;\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n  }\r\n`;\r\n\r\nconst NewsList = ({ category }) => {\r\n  const [articles, setArticles] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //useEffect 한번으로 컴포넌트 맨 처음 렌더링, category 값이 바뀔 때 요청하도록 설정 가능\r\n\r\n  useEffect(() => {\r\n    // async를 사용하는 함수 따로 선언\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        //category 값이 all이면 query값을 공백, all이 아니\r\n        //면 $category=카테고리 형태의 문자열을 만듬\r\n        const query = category === \"all\" ? \"\" : `&category=${category}`;\r\n        const response = await axios.get(\r\n          `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=0a8c4202385d4ec1bb93b7e277b3c51f`\r\n        );\r\n        setArticles(response.data.articles);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [category]);\r\n  //category이 바뀔때마다 뉴스를 새로 불러\r\n  //와야 하므로 useEffect의 의존 배열에 category 넣음\r\n\r\n  // 대기 중일 때\r\n  if (loading) {\r\n    return <NewsListBlock>대기 중...</NewsListBlock>;\r\n  }\r\n  // 아직 articles 값이 설정되지 않았을 때\r\n  if (!articles) {\r\n    return null;\r\n  }\r\n\r\n  // articles 값이 유효할 때\r\n  return (\r\n    <NewsListBlock>\r\n      {articles.map((article) => (\r\n        <NewsItem key={article.url} article={article} />\r\n      ))}\r\n    </NewsListBlock>\r\n  );\r\n};\r\n\r\nexport default NewsList;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AdBlock = styled.div`\r\n  float: right;\r\n  width: 20%;\r\n  height: 400vh;\r\n  border: 2px solid #000;\r\n  margin-top: 3rem;\r\n  margin-right: 3rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst Ad = () => {\r\n  return (\r\n    <AdBlock>\r\n      <div>광고란 입니다.</div>\r\n    </AdBlock>\r\n  );\r\n};\r\n\r\nexport default Ad;\r\n","import React from \"react\";\r\nimport Categories from \"../components/Categories\";\r\nimport NewsList from \"../components/NewsList\";\r\nimport Ad from \"../components/Ad\";\r\n\r\nconst NewsPage = ({ match }) => {\r\n  //카테고리가 선택되지 않았으면 기본값 all로 사용\r\n  const category = match.params.category || \"all\";\r\n\r\n  return (\r\n    <div>\r\n      <Categories />\r\n      <NewsList category={category} />\r\n      <Ad />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewsPage;\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport NewsPage from \"./pages/NewsPage\";\n\nconst App = () => {\n  return <Route path=\"/:category?\" component={NewsPage} />;\n};\n//?는 값이 선택적이라는 의미. 있을수도 없을수도 있음\n//URL파라미터가 없으면 전체 카테고리를 선택한 것으로 간주\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}